\section{Моделиране}
	
	За създаване на гореописаната система са нужни два големи отделни компонента:
	
	\begin{itemize}
		\item \emph{Сървър} - обработва данни за отделните приложения и потребители на системата. Грижи се за събирането, запазването, предоставянето
		и анализирането на препоръки за клиентската част. Предоставя \ac{API} за работа с данните, които съхранява. От своя страна, този компонент
		може да бъде разделен на следните, по-малки такива:
		
		\begin{itemize}
			\item Database е компонент, който предоставя услуга за съхранение на данни. Той играе ролята на косвен(implicit) интерфейс, с който да работят останалите компоненти от сървърната част.
			\item Spider се грижи за събиране на информация за различните приложения от уеб страници. Данните се запазват за по-нататъшен анализ.
			\item Recommender е сърцето на системата. Подобно на примера на Amazon, този модул предварително създава препоръки и ги запазва за употреба
			от други части на системата. Използва данни събрани от предишния модул, както и такива предоставени от потребителите на системата.
			\item Provider предоставя \ac{API} за комуникация със сървърната част. Той е единственият начин за обмяна на информация. Негова цел е да остане независим от клиенти и същевременно да предостави лесен и бърз начин за работа.
		\end{itemize}
		
		Фигура ~\ref{figure:server-component} показва UML диаграма на сървърния компонент.
		
		\begin{figure}[htbp]
			\centering	
 			\includegraphics[scale=1.5]{diagrams/server-component.1}
			\caption{UML диаграма на сървърния компонент}
			\label{figure:server-component}
		\end{figure}
		
		
		\item \emph{Клиент} предоставя, може би, най-важната част от системата - това, с което потребителя взаимодейства. Скрита за него остава комуникацията със сървъра. В този модул се разглеждат следните подмодули:
		
		\begin{itemize}
			\item GUI се грижи за представяне на препоръките, инсталиране на приложения и оценяването им. Този модул трябва да предоставя идентично изживяване за потребителя, независимо от устройството, с което той разполага, т.е. трябва да е високо адаптивен.
			\item Watcher събира допълнителна информация за потребителя, която да спомогне за създаване на по-точни препоръки. Инсталирани приложения, време, за което се посещават, брой посещения, са част от събираните данни. Модулът спомага за идентифициране на потребителя, което премахва нуждата от регистрация.
			\item Client комуникира със сървърната част, като предоставя информация за потребителя и извлича препоръки. Важно за модула е да извършва функциите си по напълно прозрачен начин за потребителя.

		\end{itemize}
		
		Естествен въпрос, който може да се породи в подобна ситуация е "Защо клиентът изпълнява толкова малка част от тежките изчислителни процеси?".
		При по-детайлно вглеждане в хардуера на днешните мобилни телефони от висок клас(напр. \emph{Samsung Galaxy S4\footnote{\url{http://www.gsmarena.com/samsung_i9500_galaxy_s4-5125.php}}}), става ясно, че съществува модел с 4-ядрен централен процесор и два гигабайта вътрешна памет. Това е съпоставима изчислителна мощ на преносим компютър от преди три години. Разработчиците на мобилни приложения нямат достъп до пълния капацитет на устройството. Допълнителните ядра се грижит по-скоро за това телефонът да остане използваем и не предоставят пълен контрол върху хардуера\cite{Gupta}.
		Остава възможността за създаване на хибридни системи, в които клиентът да допринася към по-тежките изчислителни процеси. При създаване на подобно решение, допълнителна процесорна мощ ще трябва да се отдели за разпределение на задачите, което може да намали осезаемо ефективността на системата.
		
		Фигура ~\ref{figure:client-component} показва UML диаграма на клиента.
		
		\begin{figure}[htbp]
			\centering	
 			\includegraphics[scale=2]{diagrams/client-component.1}
			\caption{UML диаграма на клиента}
			\label{figure:client-component}
		\end{figure}
	\end{itemize}
	
	Фигура ~\ref{figure:app-activity} показва дейностна(Activity) диаграма, която описва начина, по който предложенията за приложения се предоставят на потребителя.
	Ясно се вижда, че процесите, обвързани със събиране и анализиране на данни, са отделени от останалата част на системата.
	
		\begin{figure}[htbp]
			\centering
 			\includegraphics[scale=1.3]{diagrams/app-activity.1}
			\caption{Activity диаграма на системата}
			\label{figure:app-activity}
		\end{figure}
	
	\subsection{Основен модел на системата}
	
		На фигура ~\ref{figure:model} е изобразена клас диаграма с основните класове от системата. От нея се виждат двата основни компонента - App и User. Всички останали, може да се разглеждат като спомагателни за тях и имат сравнително проста структура.
	
		\begin{figure}[htbp]
			\centering
 			\includegraphics[scale=1.5]{diagrams/model.1}
			\caption{Клас диаграма на модела на системата}
			\label{figure:model}
		\end{figure}
